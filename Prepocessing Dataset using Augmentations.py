# -*- coding: utf-8 -*-
"""Copy of Praprepcessing Columbia Dataset Augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11w8qiwmaMgzW47nKDL5CqqSJrmO9MbY3
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/main.csv')

# Hapus awalan 'UMLS:' dari kolom gejala dan label
# Langkah 1: Ubah nama kolom untuk menghapus awalan 'UMLS:' pada nama gejala
df.columns = [col.split('_', 1)[-1] if col.startswith('UMLS:') else col for col in df.columns]

# Langkah 2: Hapus awalan 'UMLS:' dari label di kolom 'label'
df['label'] = df['label'].apply(lambda labels: [label.split('_', 1)[-1] for label in labels.split('^')])

# Langkah 3: Ambil penyakit pertama dari daftar penyakit
df['label'] = df['label'].apply(lambda labels: labels[0] if labels else None)

# Langkah 4: Mengubah nama kolom label (kolom ke-409) menjadi 'prognosis'
df = df.rename(columns={df.columns[-1]: 'prognosis'})

df.head()

# Mengambil daftar unik nama penyakit dari kolom 'prognosis'
unique_diseases = df['prognosis'].unique()  # Menggunakan 'prognosis'

print(unique_diseases)

# Menghitung jumlah nama penyakit unik
num_unique_diseases = len(unique_diseases)

# Menampilkan hasil
print("Jumlah penyakit unik dalam dataset:", num_unique_diseases)

# Menghapus kolom ke FREQUENCY
df = df.drop(df.columns[0], axis=1)

df.shape

# Menghapus kolom ke-102
df = df.drop(df.columns[102], axis=1)  # Kolom ke-102 berada pada indeks 101 karena indeks mulai dari 0

# Periksa apakah ada duplikasi pada indeks
duplicates = df.index.duplicated().any()
print("Apakah ada indeks duplikat?:", duplicates)

# Cek nama kolom untuk duplikasi
duplicate_columns = df.columns[df.columns.duplicated()].tolist()
print("Kolom duplikat:", duplicate_columns)

# Menghapus kolom duplikat (misalnya, kita akan menghapus yang kedua)
df = df.loc[:, ~df.columns.duplicated()]

import random

# Fungsi untuk augmentasi kombinasi gejala
def augment_multibiner(df, num_augmentations=2):
    augmented_data = []

    for _, row in df.iterrows():
        # Tentukan gejala yang aktif (bernilai 1) pada penyakit tertentu
        active_symptoms = row[row == 1].index.tolist()

        # Lakukan augmentasi sejumlah num_augmentations untuk setiap baris data asli
        for _ in range(num_augmentations):
            new_sample = row.copy()

            # Pilih subset acak dari gejala aktif untuk dibuat variasi
            num_symptoms_to_modify = random.randint(1, len(active_symptoms))
            modified_symptoms = random.sample(active_symptoms, num_symptoms_to_modify)

            # Buat kombinasi gejala baru dengan mengacak status gejala pada modified_symptoms
            for symptom in modified_symptoms:
                new_sample[symptom] = 1 - new_sample[symptom]  # Membalikkan 0 ke 1 atau sebaliknya

            # Simpan sampel baru dengan label yang sama
            augmented_data.append(new_sample)

    # Gabungkan data asli dengan data augmented
    augmented_df = pd.DataFrame(augmented_data)
    df_augmented = pd.concat([df, augmented_df], ignore_index=True)
    return df_augmented

# Menjalankan fungsi augmentasi
augmented_df = augment_multibiner(df)
print(augmented_df)

augmented_df.to_csv('augmented_dataset.csv', index=False)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Fungsi untuk mengecek dan menghapus duplikat
def remove_duplicates(df):
    # Menghapus duplikat berdasarkan semua kolom
    return df.drop_duplicates()

X = df.drop(columns=['prognosis'])
y = df['prognosis']

# Daftar untuk menyimpan akurasi
results = []

# Daftar nilai num_augmentations yang ingin dicoba
num_augmentations_list = [5, 15, 25, 50, 100]

for num_augmentations in num_augmentations_list:
    accuracies = []
    for _ in range(5):  # Uji 5 kali
        # Jalankan augmentasi
        augmented_df = augment_multibiner(df, num_augmentations=num_augmentations)

        # Hapus duplikat setelah augmentasi
        augmented_df = remove_duplicates(augmented_df)

        # Pisahkan data latih dan uji baru
        X_augmented = augmented_df.drop(columns=['prognosis'])
        y_augmented = augmented_df['prognosis']
        X_train_aug, X_test_aug, y_train_aug, y_test_aug = train_test_split(
            X_augmented, y_augmented, test_size=0.2, stratify=y_augmented, random_state=42
        )

        # Inisialisasi model Random Forest
        model = RandomForestClassifier(random_state=42)

        # Latih model
        model.fit(X_train_aug, y_train_aug)

        # Prediksi
        y_pred = model.predict(X_test_aug)

        # Hitung akurasi
        accuracy = accuracy_score(y_test_aug, y_pred)
        accuracies.append(accuracy)

    # Hitung rata-rata akurasi
    avg_accuracy = sum(accuracies) / len(accuracies)
    results.append((num_augmentations, avg_accuracy))

# Tampilkan hasil rata-rata
for num, acc in results:
    print(f"Num Augmentations: {num}, Average Accuracy: {acc:.4f}")

import random

# Fungsi untuk augmentasi kombinasi gejala
def augment_multibiner(df, num_augmentations=100):
    augmented_data = []

    for _, row in df.iterrows():
        # Tentukan gejala yang aktif (bernilai 1) pada penyakit tertentu
        active_symptoms = row[row == 1].index.tolist()

        # Lakukan augmentasi sejumlah num_augmentations untuk setiap baris data asli
        for _ in range(num_augmentations):
            new_sample = row.copy()

            # Pilih subset acak dari gejala aktif untuk dibuat variasi
            num_symptoms_to_modify = random.randint(1, len(active_symptoms))
            modified_symptoms = random.sample(active_symptoms, num_symptoms_to_modify)

            # Buat kombinasi gejala baru dengan mengacak status gejala pada modified_symptoms
            for symptom in modified_symptoms:
                new_sample[symptom] = 1 - new_sample[symptom]  # Membalikkan 0 ke 1 atau sebaliknya

            # Simpan sampel baru dengan label yang sama
            augmented_data.append(new_sample)

    # Gabungkan data asli dengan data augmented
    augmented_df = pd.DataFrame(augmented_data)
    df_augmented = pd.concat([df, augmented_df], ignore_index=True)
    return df_augmented

# Menjalankan fungsi augmentasi
augmented_df = augment_multibiner(df)
print(augmented_df)

# Memeriksa nilai duplikat dalam augmented_df
duplicates = augmented_df.duplicated().sum()
if duplicates > 0:
    print(f"Ada {duplicates} baris duplikat yang ditemukan.")
else:
    print("Tidak ada baris duplikat yang ditemukan.")

# Menghapus baris duplikat
augmented_df = augmented_df.drop_duplicates()

augmented_df.to_csv('augmented_dataset.csv', index=False)





